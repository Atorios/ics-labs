/*
 * proxy.c - ICS Web proxy
 * ID: 516030910233
 * name: Li Jun
 */

#include "csapp.h"
#include <stdarg.h>
#include <sys/select.h>

/*
 * Function prototypes
 */
int parse_uri(char *uri, char *target_addr, char *path, char *port);
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, char *uri, size_t size);
ssize_t Rio_readn_w(int fd, void *ptr, size_t nbytes);
void Rio_writen_w(int fd, void *usrbuf, size_t n);
ssize_t Rio_readlineb_w(rio_t *rp, void *usrbuf, size_t maxlen);
void build_header(rio_t *rp, char *header, char *method, char *pathname, char *version);
void doit(int fd, struct sockaddr_in *sockaddr);
void clienterror(int fd, char *cause, char *errnum, char *shortmsg, char *longmsg);

/*
 * main - Main routine for the proxy program
 */
int main(int argc, char **argv)
{
    int listenfd, connfd;
    char hostname[MAXLINE], port[MAXLINE];
    socklen_t clientlen;
    struct sockaddr_storage clientaddr;
    
    /* Check arguments */
    if (argc != 2) {
        fprintf(stderr, "Usage: %s <port number>\n", argv[0]);
        exit(0);
    }

    listenfd = Open_listenfd(argv[1]);
    while (1) {
        clientlen = sizeof(clientaddr);
        connfd = Accept(listenfd, (SA *)&clientaddr, &clientlen);
        Getnameinfo((SA *) &clientaddr, clientlen, hostname, MAXLINE, port, MAXLINE, 0);
        doit(connfd, (struct sockaddr_in *) &clientaddr);
        Close(connfd);
    }

    exit(0);
}


/*
 * parse_uri - URI parser
 *
 * Given a URI from an HTTP proxy GET request (i.e., a URL), extract
 * the host name, path name, and port.  The memory for hostname and
 * pathname must already be allocated and should be at least MAXLINE
 * bytes. Return -1 if there are any problems.
 */
int parse_uri(char *uri, char *hostname, char *pathname, char *port)
{
    char *hostbegin;
    char *hostend;
    char *pathbegin;
    int len;

    if (strncasecmp(uri, "http://", 7) != 0) {
        hostname[0] = '\0';
        return -1;
    }

    /* Extract the host name */
    hostbegin = uri + 7;
    hostend = strpbrk(hostbegin, " :/\r\n\0");
    if (hostend == NULL)
        return -1;
    len = hostend - hostbegin;
    strncpy(hostname, hostbegin, len);
    hostname[len] = '\0';

    /* Extract the port number */
    if (*hostend == ':') {
        char *p = hostend + 1;
        while (isdigit(*p))
            *port++ = *p++;
        *port = '\0';
    } else {
        strcpy(port, "80");
    }

    /* Extract the path */
    pathbegin = strchr(hostbegin, '/');
    if (pathbegin == NULL) {
        pathname[0] = '\0';
    }
    else {
        pathbegin++;
        strcpy(pathname, pathbegin);
    }

    return 0;
}

/*
 * format_log_entry - Create a formatted log entry in logstring.
 *
 * The inputs are the socket address of the requesting client
 * (sockaddr), the URI from the request (uri), the number of bytes
 * from the server (size).
 */
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr,
                      char *uri, size_t size)
{
    time_t now;
    char time_str[MAXLINE];
    unsigned long host;
    unsigned char a, b, c, d;

    /* Get a formatted time string */
    now = time(NULL);
    strftime(time_str, MAXLINE, "%a %d %b %Y %H:%M:%S %Z", localtime(&now));

    /*
     * Convert the IP address in network byte order to dotted decimal
     * form. Note that we could have used inet_ntoa, but chose not to
     * because inet_ntoa is a Class 3 thread unsafe function that
     * returns a pointer to a static variable (Ch 12, CS:APP).
     */
    host = ntohl(sockaddr->sin_addr.s_addr);
    a = host >> 24;
    b = (host >> 16) & 0xff;
    c = (host >> 8) & 0xff;
    d = host & 0xff;

    /* Return the formatted log entry string */
    sprintf(logstring, "%s: %d.%d.%d.%d %s %zu", time_str, a, b, c, d, uri, size);
}

void build_header(rio_t *rp, char *header, char *method, char *pathname, char *version)
{
    char buf[MAXLINE];

    sprintf(header, "%s /%s %s\r\n", method, pathname, version);
    Rio_readlineb_w(rp, buf, MAXLINE);
    strcat(header, buf);
    while (strcmp(buf, "\r\n")) {
        Rio_readlineb_w(rp, buf, MAXLINE);
        // if (strcasestr(buf, "Proxy-Connection: ")) {
        //     strcpy(buf + strlen("Proxy-Connection: "), "close\r\n");
        // }
        strcat(header, buf);
    }
    strcat(header, "\r\n");
}

/*
 * Rio wrappers
 */
ssize_t Rio_readn_w(int fd, void *ptr, size_t nbytes) 
{
    ssize_t n;
  
    if ((n = rio_readn(fd, ptr, nbytes)) < 0) {
        fprintf(stderr, "readn error\n");
        return 0;
    }

    return n;
}

void Rio_writen_w(int fd, void *usrbuf, size_t n) 
{
    if (rio_writen(fd, usrbuf, n) != n) {
        fprintf(stderr, "writen error\n");
    }
	    
}

ssize_t Rio_readlineb_w(rio_t *rp, void *usrbuf, size_t maxlen) 
{
    ssize_t rc;

    if ((rc = rio_readlineb(rp, usrbuf, maxlen)) < 0) {
        fprintf(stderr, "readlineb error\n");
        return 0;
    }
    return rc;
} 

void doit(int fd, struct sockaddr_in *sockaddr)
{
    int server_fd;
    int n, cnt, len;
    char buf[MAXLINE], method[MAXLINE], uri[MAXLINE], version[MAXLINE];
    char hostname[MAXLINE], pathname[MAXLINE], port[MAXLINE];
    char header[MAXLINE];
    char logstring[MAXLINE];
    char content[MAXLINE];
    rio_t rio;

    Rio_readinitb(&rio, fd);

    /* parse request header */
    if (Rio_readlineb_w(&rio, buf, MAXLINE) == 0) {
        fprintf(stderr, "Bad request\n");
        clienterror(fd, method, "400","Bad Request", "Bad Request");
        return;
    }
    if (sscanf(buf, "%s %s %s", method, uri, version) < 3) {
        fprintf(stderr, "sscanf error\n");
        clienterror(fd, method, "404","Not Found", "Not Found");
        return;
    }
    if (parse_uri(uri, hostname, pathname, port) < 0) {
        fprintf(stderr, "Illegal URL\n");
        clienterror(fd, method, "404","Not Found", "Not Found");
        return;
    }
    build_header(&rio, header, method, pathname, version);
    
    /* open server fd */
    server_fd = open_clientfd(hostname, port);
    if (server_fd < 0) {
        fprintf(stderr, "Fail to connect server\n");
        clienterror(fd, method, "500", "Internal Server Error", "Fail to connect server");
        return;
    }

    printf("client request header:%s", header);
    Rio_writen_w(server_fd, header, strlen(header)); // send header
    while (Rio_readnb(&rio, buf, 1) > 0) { // send body
        Rio_writen_w(server_fd, buf, 1);
    }

    Rio_readinitb(&rio, server_fd);

    /* get response and send to client */
    /* get header */
    cnt = 0;
    while ((n = Rio_readlineb_w(&rio, buf, MAXLINE)) > 0) {
        if (strcasestr(buf, "Content-Length: ")) {
            sscanf(buf + strlen("Content-Length: "), "%d", &len);
        }
        Rio_writen_w(fd, buf, n);
        cnt += n;
        if (!strcmp(buf, "\r\n")) {
            break;
        }
    }
    /* get body */
    cnt += len;
    while (len > 0) {
        n = Rio_readnb(&rio, buf, MAXLINE);
        Rio_writen_w(fd, buf, n);
        len -= MAXLINE;
    }

    /* log */
    format_log_entry(logstring, sockaddr, uri, cnt);
    printf("%s\n", logstring);
    fflush(stdout);

    Close(server_fd);
}

void clienterror(int fd, char *cause, char *errnum, 
		 char *shortmsg, char *longmsg) 
{
    char buf[MAXLINE], body[MAXBUF];

    /* Build the HTTP response body */
    sprintf(body, "<html><title>Proxy Error</title>");
    sprintf(body, "%s<body bgcolor=""ffffff"">\r\n", body);
    sprintf(body, "%s%s: %s\r\n", body, errnum, shortmsg);
    sprintf(body, "%s<p>%s: %s\r\n", body, longmsg, cause);
    sprintf(body, "%s<hr><em>The Proxy</em>\r\n", body);

    /* Print the HTTP response */
    sprintf(buf, "HTTP/1.1 %s %s\r\n", errnum, shortmsg);
    Rio_writen(fd, buf, strlen(buf));
    sprintf(buf, "Content-type: text/html\r\n");
    Rio_writen(fd, buf, strlen(buf));
    sprintf(buf, "Content-length: %d\r\n\r\n", (int)strlen(body));
    Rio_writen(fd, buf, strlen(buf));
    Rio_writen(fd, body, strlen(body));
}