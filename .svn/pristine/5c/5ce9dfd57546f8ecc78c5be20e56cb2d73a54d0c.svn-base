/*
 * 
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"

static char *basep = NULL;
#define ptr_to_word(ptr) ((ptr == NULL) ? 0U : (unsigned int)((char *)(ptr) - basep))
#define word_to_ptr(word) ((word == 0U) ? NULL : (char *)basep + (unsigned int)(word))
/* Single word (4) or double word (8) alignment */
#define ALIGNMENT 8

/* Rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)

#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

#define WSIZE 4
#define DSIZE 8
#define CHUNKSIZE ((1<<12) + 640) // Optimized for trace 4&9&10
#define BLKSIZE 16

#define MAX(x, y) ((x) > (y)?(x) : (y))

#define PACK(size, alloc) ((size) | (alloc))

#define GET(p) (*(unsigned int*) (p))
#define PUT(p, val) (*(unsigned int*) (p) = (val))

#define SUCC(bp) ((unsigned int*)(word_to_ptr(GET(bp))))
#define PRED(bp) ((unsigned int*)(word_to_ptr(GET((unsigned int*)(bp) + 1))))

#define LINK_SUCC(from, to) (PUT((from), (ptr_to_word(to))))
#define LINK_PRED(from, to) (PUT((unsigned int*)(from)+1, (ptr_to_word(to))))

#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1)

#define HDRP(bp) ((char *)(bp) - WSIZE)
#define FTRP(bp) ((char *)(bp) + GET_SIZE(HDRP(bp)) - DSIZE)

#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - WSIZE)))
#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - DSIZE)))

#define SIZE1 (1<<4)
#define SIZE2 (1<<5)
#define SIZE3 (1<<6)
#define SIZE4 (1<<7)
#define SIZE5 (1<<8)
#define SIZE6 (1<<9)
#define SIZE7 (1<<10)
#define SIZE8 (1<<11)
#define SIZE9 (1<<12) 
#define SIZE10 (1<<13)
#define SIZE11 (1<<14)
#define SIZE12 (1<<15)
#define SIZE13 (1<<16)
#define SIZE14 (1<<17)
#define SIZE15 (1<<18)
#define SIZE16 (1<<19)
#define SIZE17 (1<<20)
#define SIZE18 (1<<21)
#define SIZE19 (1<<22)
#define LIST_NUM 20

#define INDEX(size) \
(int)((size > SIZE1) + (size > SIZE2) + (size > SIZE3) + (size > SIZE4) + (size > SIZE5) \
+ (size > SIZE6) + (size > SIZE7) + (size > SIZE8) + (size > SIZE9) + (size > SIZE10) + (size > SIZE11) + (size > SIZE12) \
+ (size > SIZE13) + (size > SIZE14) + (size > SIZE15) + (size > SIZE16) + (size > SIZE17) + (size > SIZE18) + (size > SIZE19))

static char *heap_listp = NULL;
static char *list_head = NULL;
static char *list_tail = NULL;

static void insert_list(void *bp)
{
	int index = INDEX(GET_SIZE(HDRP(bp)));
	char *free_listp = list_head + index * WSIZE;
	char *free_tailp = list_tail + index * WSIZE;
	if (SUCC(free_listp) == NULL) {
		LINK_SUCC(free_listp, bp);
		LINK_SUCC(free_tailp, bp);
		LINK_SUCC(bp, NULL);
		LINK_PRED(bp, NULL);
	} else {
		/* Insert into the list head */
		if ((char *)bp < (char *)SUCC(free_listp)) {
			LINK_SUCC(bp, SUCC(free_listp));
			LINK_PRED(SUCC(free_listp), bp);
			LINK_PRED(bp, NULL);
			LINK_SUCC(free_listp, bp);
		} 
		/* Insert into the list tail */
		else if ((char *)bp > (char *)SUCC(free_tailp)) {
			LINK_PRED(bp, SUCC(free_tailp));
			LINK_SUCC(SUCC(free_tailp), bp);
			LINK_SUCC(bp, NULL);
			LINK_SUCC(free_tailp, bp);
		} 
		/* Internal */
		else {
			char *pred = (char *)SUCC(free_listp);
			while (SUCC(pred) && (char *)SUCC(pred) < (char *)bp) {
				pred = (char *)SUCC(pred);
			}
			LINK_PRED(bp, pred);
			LINK_SUCC(bp, SUCC(pred));
			LINK_PRED(SUCC(pred), bp);
			LINK_SUCC(pred, bp);
		}
	}
}

static void remove_list(void *bp)
{ 
	int index = INDEX(GET_SIZE(HDRP(bp)));
	char *free_listp = list_head + index * WSIZE;
	char *free_tailp = list_tail + index * WSIZE;
	/* Empty list */
    if (SUCC(bp) == NULL && PRED(bp) == NULL) { 
        LINK_SUCC(free_listp, NULL);  
		LINK_SUCC(free_tailp, NULL);
    } 
	/* The tail of list */
	else if (SUCC(bp) == NULL && PRED(bp) != NULL) {  
		LINK_SUCC(free_tailp, PRED(bp));
        LINK_SUCC(PRED(bp), NULL);
    } 
	/* The head of list */
	else if (SUCC(bp) != NULL && PRED(bp) == NULL) {   
        LINK_SUCC(free_listp, SUCC(bp));  
        LINK_PRED(SUCC(bp), NULL);  
    } 
	/* Internal */
	else if (SUCC(bp) != NULL && PRED(bp) != NULL) {  
        LINK_SUCC(PRED(bp), SUCC(bp));  
        LINK_PRED(SUCC(bp), PRED(bp)); 
    } 
}

static void *coalesce(void *bp)
{
	size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));
	size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));
	size_t size = GET_SIZE(HDRP(bp));

	if (prev_alloc && next_alloc) {
		;
	}

	else if (prev_alloc && !next_alloc) {
		remove_list(NEXT_BLKP(bp));
		size += GET_SIZE(HDRP(NEXT_BLKP(bp)));
		PUT(HDRP(bp), PACK(size, 0));
		PUT(FTRP(bp), PACK(size, 0));
	}

	else if (!prev_alloc && next_alloc) {
		remove_list(PREV_BLKP(bp));
		size += GET_SIZE(HDRP(PREV_BLKP(bp)));
		PUT(FTRP(bp), PACK(size, 0));
		PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
		bp = PREV_BLKP(bp);
	}
	else {
		remove_list(NEXT_BLKP(bp));
		remove_list(PREV_BLKP(bp));
		size += GET_SIZE(HDRP(PREV_BLKP(bp))) + GET_SIZE(FTRP(NEXT_BLKP(bp)));
		PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
		PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
		bp = PREV_BLKP(bp);
	}
	insert_list(bp);
	return bp;
}

static void *extend_heap(size_t words)
{
	char *bp;
	size_t size;

	size = (words % 2) ? (words + 1) * WSIZE : words * WSIZE;
	/* Optimized for the case where the last block is free, seems useless for the traces */
	// char *lpftr = mem_heap_hi() - 3;
	// if (!GET_ALLOC(lpftr)) {
	// 	size -= GET_SIZE(lpftr);
	// }
	/*----------------------------------------------------------------------------------*/
	if ((long)(bp = mem_sbrk(size)) == -1)
		return NULL;

	PUT(HDRP(bp), PACK(size, 0));
	PUT(FTRP(bp), PACK(size, 0));
	PUT(HDRP(NEXT_BLKP(bp)), PACK(0, 1));

	return coalesce(bp);
}
/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void)
{
	basep = (char *)mem_heap_lo();
	if ((heap_listp = (char *)mem_sbrk((2 * LIST_NUM + 4)*WSIZE)) == (void *)-1)
		return -1;
	list_head = heap_listp;
	list_tail = heap_listp + LIST_NUM * WSIZE;
	heap_listp += 2 * LIST_NUM * WSIZE;
	PUT(heap_listp, 0);
	PUT(heap_listp + 1*WSIZE, PACK(DSIZE, 1));
	PUT(heap_listp + 2*WSIZE, PACK(DSIZE, 1));
	PUT(heap_listp + 3*WSIZE, PACK(0, 1));
	heap_listp += 2 * WSIZE;

	for (int i = 0; i < LIST_NUM; i++) {
		LINK_SUCC(list_head + i * WSIZE, NULL);
		LINK_SUCC(list_tail + i * WSIZE, NULL);
	}

	if(extend_heap(CHUNKSIZE/WSIZE) == NULL)
		return -1;
	return 0;
}

static void *find_fit(size_t asize)
{
	unsigned int *ptr;
	
	for (int index = INDEX(asize); index < LIST_NUM; index++) {
		ptr = SUCC(list_head + index * WSIZE);
		while (ptr != NULL) {
			if (GET_SIZE(HDRP(ptr)) >= asize) {
				return (void *)ptr;
			}
			ptr = SUCC(ptr);
		}
	}
	
	return NULL;
}

static void *place(void *bp, size_t asize)
{
	// // Ordinary version //
	// size_t csize = GET_SIZE(HDRP(bp));
	// remove_list(bp);
	// if ((csize - asize) >= BLKSIZE) {
	// 	PUT(HDRP(bp), PACK(asize, 1));
	// 	PUT(FTRP(bp), PACK(asize, 1));
	// 	void *n_bp = NEXT_BLKP(bp);
	// 	PUT(HDRP(n_bp), PACK(csize-asize, 0));
	// 	PUT(FTRP(n_bp), PACK(csize-asize, 0));
	// 	insert_list(n_bp);
	// } else {
	// 	PUT(HDRP(bp), PACK(csize, 1));
	// 	PUT(FTRP(bp), PACK(csize, 1));
	// }
	// return bp;
	
	/* Optimized for trace7&8 
	 * Place the smaller block in the left of the free block
	 * The bigger one the right
	 * But may result small fragment
	 */
	size_t prev_size = GET_SIZE(FTRP(PREV_BLKP(bp)));
	size_t csize = GET_SIZE(HDRP(bp));
	remove_list(bp);
	if ((csize - asize) < BLKSIZE) {
		PUT(HDRP(bp), PACK(csize, 1));
		PUT(FTRP(bp), PACK(csize, 1));
	} else {
		if (prev_size == DSIZE || asize <= prev_size) {
			/* Left assigned right free */
			PUT(HDRP(bp), PACK(asize, 1));
			PUT(FTRP(bp), PACK(asize, 1));
			void *n_bp = NEXT_BLKP(bp);
			PUT(HDRP(n_bp), PACK(csize-asize, 0));
			PUT(FTRP(n_bp), PACK(csize-asize, 0));
			insert_list(n_bp);
		} else {
			/* Right assigned left free */
			PUT(HDRP(bp), PACK(csize-asize, 0));
			PUT(FTRP(bp), PACK(csize-asize, 0));
			insert_list(bp);
			bp = NEXT_BLKP(bp);
			PUT(HDRP(bp), PACK(asize, 1));
			PUT(FTRP(bp), PACK(asize, 1));
		}
	}
	return bp;
}

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
	size_t asize;
	size_t extendsize;
	char *bp;

	if (size == 0)
		return NULL;

	if (size <= DSIZE)
		asize = BLKSIZE;
	else
		asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE);

	if ((bp = find_fit(asize)) != NULL) {
		return place(bp, asize);
	}

	extendsize = MAX(asize, CHUNKSIZE);
	if ((bp = extend_heap(extendsize/WSIZE)) == NULL)
		return NULL;
	return place(bp, asize);
}

/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)
{
	size_t size = GET_SIZE(HDRP(ptr));

	PUT(HDRP(ptr), PACK(size, 0));
	PUT(FTRP(ptr), PACK(size, 0));
	coalesce(ptr);
}

/*
 * 
 */
void *mm_realloc(void *ptr, size_t size)
{
	size_t asize;
    void *oldptr = ptr;
    void *newptr;
	if (ptr == NULL) {
		return mm_malloc(size);
	}
	if (size == 0) {
		mm_free(ptr);
		return NULL;
	}

	if (size <= DSIZE)
		asize = BLKSIZE;
	else
		asize = DSIZE * ((size + (DSIZE) + (DSIZE-1)) / DSIZE);

	size_t oldSize = GET_SIZE(HDRP(ptr));
	size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(ptr)));
	size_t next_size = GET_SIZE(HDRP(NEXT_BLKP(ptr)));
	size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(ptr)));
	size_t prev_size = GET_SIZE(FTRP(PREV_BLKP(ptr)));

	size_t copySize = oldSize - DSIZE;

	if (asize == oldSize) {
		return ptr;
	}

	else if (asize > oldSize) {
		if (!next_alloc && asize <= oldSize + next_size) {
			remove_list(NEXT_BLKP(ptr));
			if (oldSize + next_size - asize >= BLKSIZE) {
				PUT(HDRP(ptr), PACK(asize, 1));
				PUT(FTRP(ptr), PACK(asize, 1));
				void *n_ptr = NEXT_BLKP(ptr);
				PUT(HDRP(n_ptr), PACK(oldSize + next_size - asize, 0));
				PUT(FTRP(n_ptr), PACK(oldSize + next_size - asize, 0));
				insert_list(n_ptr);
			} else {
				PUT(HDRP(ptr), PACK(oldSize + next_size, 1));
				PUT(FTRP(ptr), PACK(oldSize + next_size, 1));
			}
			return ptr;
		}

		if (!prev_alloc && asize <= oldSize + prev_size) {
			newptr = PREV_BLKP(ptr);
			remove_list(newptr);
			memmove(newptr, oldptr, copySize);
			if (oldSize + prev_size - asize >= BLKSIZE) {
				PUT(HDRP(newptr), PACK(asize, 1));
				PUT(FTRP(newptr), PACK(asize, 1));
				void *n_ptr = NEXT_BLKP(newptr);
				PUT(HDRP(n_ptr), PACK(oldSize + prev_size - asize, 0));
				PUT(FTRP(n_ptr), PACK(oldSize + prev_size - asize, 0));
				insert_list(n_ptr);
			} else {
				PUT(HDRP(newptr), PACK(oldSize + prev_size, 1));
				PUT(FTRP(newptr), PACK(oldSize + prev_size, 1));
			}
			return newptr;
		}

		newptr = mm_malloc(size);
		if (newptr == NULL)
			return NULL;
		memcpy(newptr, oldptr, copySize);
		mm_free(oldptr);
		return newptr;
	}

	else if (asize < oldSize) {
		if (oldSize - asize >= BLKSIZE) {
			PUT(HDRP(ptr), PACK(asize, 1));
			PUT(FTRP(ptr), PACK(asize, 1));
			void *n_ptr = NEXT_BLKP(ptr);
			PUT(HDRP(n_ptr), PACK(oldSize - asize, 0));
			PUT(FTRP(n_ptr), PACK(oldSize - asize, 0));
			insert_list(coalesce(n_ptr));
		} 
		return ptr;
	}
	return NULL;
}
