                            | #######################################################################
                            | # Test for copying block of size 1;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4a804000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20100000000000000 | 	irmovq $1, %rdx		# src and dst have 1 elements
0x014: 30f61804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 809002000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name: lijun
                            | # ID: 516030910233
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x045: 72bd01000000000000   | 	jl Loop8end
0x04e:                      | Loop8:
0x04e: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x058: 6288                 | 	andq %r8, %r8
0x05a: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x064: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x06e: 718100000000000000   | 	jle L0
0x077: c0f00100000000000000 | 	iaddq $1, %rax
0x081:                      | L0:
0x081: 6299                 | 	andq %r9, %r9		# val <= 0?
0x083: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x08d: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x097: 71aa00000000000000   | 	jle L1
0x0a0: c0f00100000000000000 | 	iaddq $1, %rax
0x0aa:                      | L1:
0x0aa: 62aa                 | 	andq %r10, %r10
0x0ac: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0b6: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0c0: 71d300000000000000   | 	jle L2
0x0c9: c0f00100000000000000 | 	iaddq $1, %rax
0x0d3:                      | L2:
0x0d3: 62bb                 | 	andq %r11, %r11
0x0d5: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x0df: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0e9: 71fc00000000000000   | 	jle L3
0x0f2: c0f00100000000000000 | 	iaddq $1, %rax
0x0fc:                      | L3:
0x0fc: 62cc                 | 	andq %r12, %r12
0x0fe: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x108: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x112: 712501000000000000   | 	jle L4
0x11b: c0f00100000000000000 | 	iaddq $1, %rax
0x125:                      | L4:
0x125: 62dd                 | 	andq %r13, %r13
0x127: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x131: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x13b: 714e01000000000000   | 	jle L5
0x144: c0f00100000000000000 | 	iaddq $1, %rax
0x14e:                      | L5:
0x14e: 62ee                 | 	andq %r14, %r14
0x150: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x15a: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x164: 717701000000000000   | 	jle L6
0x16d: c0f00100000000000000 | 	iaddq $1, %rax
0x177:                      | L6:
0x177: 6233                 | 	andq %rbx, %rbx
0x179: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x183: 719601000000000000   | 	jle L7
0x18c: c0f00100000000000000 | 	iaddq $1, %rax
0x196:                      | L7:
0x196: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x1a0: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1aa: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len--
0x1b4:                      | test:
0x1b4: 754e00000000000000   | 	jge Loop8			# if so, goto Loop:
0x1bd:                      | Loop8end:
0x1bd: c0f20800000000000000 | 	iaddq $8, %rdx
                            | 
0x1c7: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x1d1: 725302000000000000   | 	jl Loop2end
0x1da:                      | Loop2:
0x1da: 50970000000000000000 | 	mrmovq (%rdi), %r9
0x1e4: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10
0x1ee: 40960000000000000000 | 	rmmovq %r9, (%rsi)
0x1f8: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)
                            | 
0x202: 6299                 | 	andq %r9, %r9
0x204: 711702000000000000   | 	jle L8
0x20d: c0f00100000000000000 | 	iaddq $1, %rax
0x217:                      | L8:
0x217: 62aa                 | 	andq %r10, %r10
0x219: 712c02000000000000   | 	jle L9
0x222: c0f00100000000000000 | 	iaddq $1, %rax
0x22c:                      | L9:
0x22c: c0f71000000000000000 | 	iaddq $16, %rdi
0x236: c0f61000000000000000 | 	iaddq $16, %rsi
0x240: c0f2feffffffffffffff | 	iaddq $-2, %rdx
0x24a:                      | test2:
0x24a: 75da01000000000000   | 	jge Loop2
0x253:                      | Loop2end:
0x253: c0f20200000000000000 | 	iaddq $2, %rdx
                            | 
0x25d: 50970000000000000000 | 	mrmovq (%rdi), %r9
0x267: 718f02000000000000   | 	jle Done
0x270: 6299                 | 	andq %r9, %r9
0x272: 718502000000000000   | 	jle L10
0x27b: c0f00100000000000000 | 	iaddq $1, %rax
0x285:                      | L10: 
0x285: 40960000000000000000 | 	rmmovq %r9, (%rsi)
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x28f:                      | Done:
0x28f: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x290:                      | End:
                            | #/* $end ncopy-ys */
0x290:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 1.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x290:                      | check:
                            | 	# Return value test
0x290: 30fa0100000000000000 | 	irmovq $1,%r10
0x29a: 61a0                 | 	subq %r10,%rax
0x29c: 73b802000000000000   | 	je checkb
0x2a5: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2af: 70f603000000000000   | 	jmp cdone
0x2b8:                      | checkb:
                            | 	# Code length check
0x2b8: 30f09002000000000000 | 	irmovq EndFun,%rax
0x2c2: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2cc: 6120                 | 	subq %rdx,%rax
0x2ce: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2d8: 6102                 | 	subq %rax,%rdx
0x2da: 75f602000000000000   | 	jge checkm
0x2e3: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x2ed: 70f603000000000000   | 	jmp cdone
0x2f6:                      | checkm:
0x2f6: 30f21804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x300: 30f3f803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x30a: 30f70100000000000000 | 	irmovq $1,%rdi  # Count
0x314: 6277                 | 	andq %rdi,%rdi
0x316: 737403000000000000   | 	je checkpre         # Skip check if count = 0
0x31f:                      | mcloop:
0x31f: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x329: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x333: 6160                 | 	subq %rsi,%rax
0x335: 735103000000000000   | 	je  mok
0x33e: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x348: 70f603000000000000   | 	jmp cdone
0x351:                      | mok:
0x351: 30f00800000000000000 | 	irmovq $8,%rax
0x35b: 6002                 | 	addq %rax,%rdx	  # dest ++
0x35d: 6003                 | 	addq %rax,%rbx    # src++
0x35f: 30f00100000000000000 | 	irmovq $1,%rax
0x369: 6107                 | 	subq %rax,%rdi    # cnt--
0x36b: 761f03000000000000   | 	jg mcloop
0x374:                      | checkpre:
                            | 	# Check for corruption
0x374: 30f21004000000000000 | 	irmovq Predest,%rdx
0x37e: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x388: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x392: 6120                 | 	subq %rdx,%rax
0x394: 73b003000000000000   | 	je checkpost
0x39d: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3a7: 70f603000000000000   | 	jmp cdone
0x3b0:                      | checkpost:
                            | 	# Check for corruption
0x3b0: 30f22004000000000000 | 	irmovq Postdest,%rdx
0x3ba: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3c4: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3ce: 6120                 | 	subq %rdx,%rax
0x3d0: 73ec03000000000000   | 	je checkok
0x3d9: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x3e3: 70f603000000000000   | 	jmp cdone
0x3ec:                      | checkok:
                            | 	# Successful checks
0x3ec: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x3f6:                      | cdone:
0x3f6: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3f8:                      | 	.align 8
0x3f8:                      | src:
0x3f8: 0100000000000000     | 	.quad 1
0x400: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x410:                      | 	.align 16
0x410:                      | Predest:
0x410: fadebc0000000000     | 	.quad 0xbcdefa
0x418:                      | dest:
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420:                      | Postdest:
0x420: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x428:                      | .align 8
                            | # Run time stack
0x428: 0000000000000000     | 	.quad 0
0x430: 0000000000000000     | 	.quad 0
0x438: 0000000000000000     | 	.quad 0
0x440: 0000000000000000     | 	.quad 0
0x448: 0000000000000000     | 	.quad 0
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
                            | 
0x4a8:                      | Stack:
