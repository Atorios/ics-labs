#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# name: lijun
# ID: 516030910233
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-8, %rdx
	jl Loop8end
Loop8:
	mrmovq (%rdi), %r8
	andq %r8, %r8
	mrmovq 8(%rdi), %r9
	rmmovq %r8, (%rsi)
	jle L0
	iaddq $1, %rax
L0:
	andq %r9, %r9		# val <= 0?
	mrmovq 16(%rdi), %r10
	rmmovq %r9, 8(%rsi)
	jle L1
	iaddq $1, %rax
L1:
	andq %r10, %r10
	mrmovq 24(%rdi), %r11
	rmmovq %r10, 16(%rsi)
	jle L2
	iaddq $1, %rax
L2:
	andq %r11, %r11
	mrmovq 32(%rdi), %r12
	rmmovq %r11, 24(%rsi)
	jle L3
	iaddq $1, %rax
L3:
	andq %r12, %r12
	mrmovq 40(%rdi), %r13
	rmmovq %r12, 32(%rsi)
	jle L4
	iaddq $1, %rax
L4:
	andq %r13, %r13
	mrmovq 48(%rdi), %r14
	rmmovq %r13, 40(%rsi)
	jle L5
	iaddq $1, %rax
L5:
	andq %r14, %r14
	mrmovq 56(%rdi), %rbx
	rmmovq %r14, 48(%rsi)
	jle L6
	iaddq $1, %rax
L6:
	andq %rbx, %rbx
	rmmovq %rbx, 56(%rsi)
	jle L7
	iaddq $1, %rax
L7:
	iaddq $64, %rdi		# src++
	iaddq $64, %rsi		# dst++
	iaddq $-8, %rdx		# len--
test:
	jge Loop8			# if so, goto Loop:
Loop8end:
	iaddq $8, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	addq %rdx, %rdx
	mrmovq JumpTable(%rdx), %rdx
	pushq %rdx
	ret
R7:
	mrmovq 48(%rdi), %r8
	andq %r8, %r8
	jle LL0
	iaddq $1, %rax
LL0:
	rmmovq %r8, 48(%rsi)
R6:
	mrmovq 40(%rdi), %r8
	andq %r8, %r8
	jle LL1
	iaddq $1, %rax
LL1:
	rmmovq %r8, 40(%rsi)
R5:
	mrmovq 32(%rdi), %r8
	andq %r8, %r8
	jle LL2
	iaddq $1, %rax
LL2:
	rmmovq %r8, 32(%rsi)
R4:
	mrmovq 24(%rdi), %r8
	andq %r8, %r8
	jle LL3
	iaddq $1, %rax
LL3:
	rmmovq %r8, 24(%rsi)
R3:
	mrmovq 16(%rdi), %r8
	andq %r8, %r8
	jle LL4
	iaddq $1, %rax
LL4:
	rmmovq %r8, 16(%rsi)
R2:
	mrmovq 8(%rdi), %r8
	andq %r8, %r8
	jle LL5
	iaddq $1, %rax
LL5:
	rmmovq %r8, 8(%rsi)
R1:
	mrmovq (%rdi), %r8
	andq %r8, %r8
	jle LL6
	iaddq $1, %rax
LL6:
	rmmovq %r8, (%rsi)

JumpTable:
	.quad Done
	.quad R1
	.quad R2
	.quad R3
	.quad R4
	.quad R5
	.quad R6
	.quad R7
	
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 5
	.quad -6
	.quad 7
	.quad 8
	.quad 9
	.quad -10
	.quad -11
	.quad -12
	.quad -13
	.quad 14
	.quad 15
	.quad -16
	.quad 17
	.quad 18
	.quad -19
	.quad 20
	.quad 21
	.quad 22
	.quad 23
	.quad 24
	.quad -25
	.quad -26
	.quad 27
	.quad -28
	.quad 29
	.quad -30
	.quad -31
	.quad -32
	.quad 33
	.quad 34
	.quad -35
	.quad -36
	.quad -37
	.quad 38
	.quad 39
	.quad -40
	.quad 41
	.quad 42
	.quad 43
	.quad -44
	.quad -45
	.quad -46
	.quad -47
	.quad -48
	.quad 49
	.quad 50
	.quad -51
	.quad -52
	.quad 53
	.quad -54
	.quad -55
	.quad -56
	.quad 57
	.quad 58
	.quad 59
	.quad 60
	.quad -61
	.quad -62
	.quad -63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
