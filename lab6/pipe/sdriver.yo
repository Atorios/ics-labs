                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f41004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f66803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f73803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | # name: lijun
                            | # ID: 516030910233
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x032: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx
0x03c: 72b401000000000000   | 	jl Loop8end
0x045:                      | Loop8:
0x045: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x04f: 6288                 | 	andq %r8, %r8
0x051: 50970800000000000000 | 	mrmovq 8(%rdi), %r9
0x05b: 40860000000000000000 | 	rmmovq %r8, (%rsi)
0x065: 717800000000000000   | 	jle L0
0x06e: c0f00100000000000000 | 	iaddq $1, %rax
0x078:                      | L0:
0x078: 6299                 | 	andq %r9, %r9		# val <= 0?
0x07a: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10
0x084: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)
0x08e: 71a100000000000000   | 	jle L1
0x097: c0f00100000000000000 | 	iaddq $1, %rax
0x0a1:                      | L1:
0x0a1: 62aa                 | 	andq %r10, %r10
0x0a3: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11
0x0ad: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)
0x0b7: 71ca00000000000000   | 	jle L2
0x0c0: c0f00100000000000000 | 	iaddq $1, %rax
0x0ca:                      | L2:
0x0ca: 62bb                 | 	andq %r11, %r11
0x0cc: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12
0x0d6: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)
0x0e0: 71f300000000000000   | 	jle L3
0x0e9: c0f00100000000000000 | 	iaddq $1, %rax
0x0f3:                      | L3:
0x0f3: 62cc                 | 	andq %r12, %r12
0x0f5: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13
0x0ff: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)
0x109: 711c01000000000000   | 	jle L4
0x112: c0f00100000000000000 | 	iaddq $1, %rax
0x11c:                      | L4:
0x11c: 62dd                 | 	andq %r13, %r13
0x11e: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14
0x128: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)
0x132: 714501000000000000   | 	jle L5
0x13b: c0f00100000000000000 | 	iaddq $1, %rax
0x145:                      | L5:
0x145: 62ee                 | 	andq %r14, %r14
0x147: 50373800000000000000 | 	mrmovq 56(%rdi), %rbx
0x151: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)
0x15b: 716e01000000000000   | 	jle L6
0x164: c0f00100000000000000 | 	iaddq $1, %rax
0x16e:                      | L6:
0x16e: 6233                 | 	andq %rbx, %rbx
0x170: 40363800000000000000 | 	rmmovq %rbx, 56(%rsi)
0x17a: 718d01000000000000   | 	jle L7
0x183: c0f00100000000000000 | 	iaddq $1, %rax
0x18d:                      | L7:
0x18d: c0f74000000000000000 | 	iaddq $64, %rdi		# src++
0x197: c0f64000000000000000 | 	iaddq $64, %rsi		# dst++
0x1a1: c0f2f8ffffffffffffff | 	iaddq $-8, %rdx		# len--
0x1ab:                      | test:
0x1ab: 754500000000000000   | 	jge Loop8			# if so, goto Loop:
0x1b4:                      | Loop8end:
0x1b4: c0f20800000000000000 | 	iaddq $8, %rdx
0x1be: 6022                 | 	addq %rdx, %rdx
0x1c0: 6022                 | 	addq %rdx, %rdx
0x1c2: 6022                 | 	addq %rdx, %rdx
0x1c4: 5022f002000000000000 | 	mrmovq JumpTable(%rdx), %rdx
0x1ce: a02f                 | 	pushq %rdx
0x1d0: 90                   | 	ret
0x1d1:                      | R7:
0x1d1: 50873000000000000000 | 	mrmovq 48(%rdi), %r8
0x1db: 6288                 | 	andq %r8, %r8
0x1dd: 71f001000000000000   | 	jle LL0
0x1e6: c0f00100000000000000 | 	iaddq $1, %rax
0x1f0:                      | LL0:
0x1f0: 40863000000000000000 | 	rmmovq %r8, 48(%rsi)
0x1fa:                      | R6:
0x1fa: 50872800000000000000 | 	mrmovq 40(%rdi), %r8
0x204: 6288                 | 	andq %r8, %r8
0x206: 711902000000000000   | 	jle LL1
0x20f: c0f00100000000000000 | 	iaddq $1, %rax
0x219:                      | LL1:
0x219: 40862800000000000000 | 	rmmovq %r8, 40(%rsi)
0x223:                      | R5:
0x223: 50872000000000000000 | 	mrmovq 32(%rdi), %r8
0x22d: 6288                 | 	andq %r8, %r8
0x22f: 714202000000000000   | 	jle LL2
0x238: c0f00100000000000000 | 	iaddq $1, %rax
0x242:                      | LL2:
0x242: 40862000000000000000 | 	rmmovq %r8, 32(%rsi)
0x24c:                      | R4:
0x24c: 50871800000000000000 | 	mrmovq 24(%rdi), %r8
0x256: 6288                 | 	andq %r8, %r8
0x258: 716b02000000000000   | 	jle LL3
0x261: c0f00100000000000000 | 	iaddq $1, %rax
0x26b:                      | LL3:
0x26b: 40861800000000000000 | 	rmmovq %r8, 24(%rsi)
0x275:                      | R3:
0x275: 50871000000000000000 | 	mrmovq 16(%rdi), %r8
0x27f: 6288                 | 	andq %r8, %r8
0x281: 719402000000000000   | 	jle LL4
0x28a: c0f00100000000000000 | 	iaddq $1, %rax
0x294:                      | LL4:
0x294: 40861000000000000000 | 	rmmovq %r8, 16(%rsi)
0x29e:                      | R2:
0x29e: 50870800000000000000 | 	mrmovq 8(%rdi), %r8
0x2a8: 6288                 | 	andq %r8, %r8
0x2aa: 71bd02000000000000   | 	jle LL5
0x2b3: c0f00100000000000000 | 	iaddq $1, %rax
0x2bd:                      | LL5:
0x2bd: 40860800000000000000 | 	rmmovq %r8, 8(%rsi)
0x2c7:                      | R1:
0x2c7: 50870000000000000000 | 	mrmovq (%rdi), %r8
0x2d1: 6288                 | 	andq %r8, %r8
0x2d3: 71e602000000000000   | 	jle LL6
0x2dc: c0f00100000000000000 | 	iaddq $1, %rax
0x2e6:                      | LL6:
0x2e6: 40860000000000000000 | 	rmmovq %r8, (%rsi)
                            | 
0x2f0:                      | JumpTable:
0x2f0: 3003000000000000     | 	.quad Done
0x2f8: c702000000000000     | 	.quad R1
0x300: 9e02000000000000     | 	.quad R2
0x308: 7502000000000000     | 	.quad R3
0x310: 4c02000000000000     | 	.quad R4
0x318: 2302000000000000     | 	.quad R5
0x320: fa01000000000000     | 	.quad R6
0x328: d101000000000000     | 	.quad R7
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x330:                      | Done:
0x330: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x331:                      | End:
                            | #/* $end ncopy-ys */
0x331:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x338:                      | 	.align 8
0x338:                      | src:
0x338: ffffffffffffffff     | 	.quad -1
0x340: feffffffffffffff     | 	.quad -2
0x348: 0300000000000000     | 	.quad 3
0x350: 0400000000000000     | 	.quad 4
0x358: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x360:                      | 	.align 16
0x360:                      | Predest:
0x360: fadebc0000000000     | 	.quad 0xbcdefa
0x368:                      | dest:
0x368: abefcd0000000000     | 	.quad 0xcdefab
0x370: abefcd0000000000     | 	.quad 0xcdefab
0x378: abefcd0000000000     | 	.quad 0xcdefab
0x380: abefcd0000000000     | 	.quad 0xcdefab
0x388:                      | Postdest:
0x388: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x390:                      | .align 8
                            | # Run time stack
0x390: 0000000000000000     | 	.quad 0
0x398: 0000000000000000     | 	.quad 0
0x3a0: 0000000000000000     | 	.quad 0
0x3a8: 0000000000000000     | 	.quad 0
0x3b0: 0000000000000000     | 	.quad 0
0x3b8: 0000000000000000     | 	.quad 0
0x3c0: 0000000000000000     | 	.quad 0
0x3c8: 0000000000000000     | 	.quad 0
0x3d0: 0000000000000000     | 	.quad 0
0x3d8: 0000000000000000     | 	.quad 0
0x3e0: 0000000000000000     | 	.quad 0
0x3e8: 0000000000000000     | 	.quad 0
0x3f0: 0000000000000000     | 	.quad 0
0x3f8: 0000000000000000     | 	.quad 0
0x400: 0000000000000000     | 	.quad 0
0x408: 0000000000000000     | 	.quad 0
                            | 
0x410:                      | Stack:
